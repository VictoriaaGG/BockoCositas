/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Articulo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-06T17:49:12.031616+01:00[Europe/Madrid]", comments = "Generator version: 7.11.0")
public class Articulo {
  public static final String SERIALIZED_NAME_CODIGO = "codigo";
  @SerializedName(SERIALIZED_NAME_CODIGO)
  @javax.annotation.Nonnull
  private String codigo;

  public static final String SERIALIZED_NAME_DESCRIPCION = "descripcion";
  @SerializedName(SERIALIZED_NAME_DESCRIPCION)
  @javax.annotation.Nonnull
  private String descripcion;

  public static final String SERIALIZED_NAME_PRECIO = "precio";
  @SerializedName(SERIALIZED_NAME_PRECIO)
  @javax.annotation.Nonnull
  private BigDecimal precio;

  public Articulo() {
  }

  public Articulo codigo(@javax.annotation.Nonnull String codigo) {
    this.codigo = codigo;
    return this;
  }

  /**
   * Get codigo
   * @return codigo
   */
  @javax.annotation.Nonnull
  public String getCodigo() {
    return codigo;
  }

  public void setCodigo(@javax.annotation.Nonnull String codigo) {
    this.codigo = codigo;
  }


  public Articulo descripcion(@javax.annotation.Nonnull String descripcion) {
    this.descripcion = descripcion;
    return this;
  }

  /**
   * Get descripcion
   * @return descripcion
   */
  @javax.annotation.Nonnull
  public String getDescripcion() {
    return descripcion;
  }

  public void setDescripcion(@javax.annotation.Nonnull String descripcion) {
    this.descripcion = descripcion;
  }


  public Articulo precio(@javax.annotation.Nonnull BigDecimal precio) {
    this.precio = precio;
    return this;
  }

  /**
   * Get precio
   * @return precio
   */
  @javax.annotation.Nonnull
  public BigDecimal getPrecio() {
    return precio;
  }

  public void setPrecio(@javax.annotation.Nonnull BigDecimal precio) {
    this.precio = precio;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Articulo articulo = (Articulo) o;
    return Objects.equals(this.codigo, articulo.codigo) &&
        Objects.equals(this.descripcion, articulo.descripcion) &&
        Objects.equals(this.precio, articulo.precio);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codigo, descripcion, precio);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Articulo {\n");
    sb.append("    codigo: ").append(toIndentedString(codigo)).append("\n");
    sb.append("    descripcion: ").append(toIndentedString(descripcion)).append("\n");
    sb.append("    precio: ").append(toIndentedString(precio)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("codigo");
    openapiFields.add("descripcion");
    openapiFields.add("precio");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("codigo");
    openapiRequiredFields.add("descripcion");
    openapiRequiredFields.add("precio");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Articulo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Articulo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Articulo is not found in the empty JSON string", Articulo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Articulo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Articulo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Articulo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("codigo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codigo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codigo").toString()));
      }
      if (!jsonObj.get("descripcion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descripcion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descripcion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Articulo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Articulo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Articulo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Articulo.class));

       return (TypeAdapter<T>) new TypeAdapter<Articulo>() {
           @Override
           public void write(JsonWriter out, Articulo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Articulo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Articulo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Articulo
   * @throws IOException if the JSON string is invalid with respect to Articulo
   */
  public static Articulo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Articulo.class);
  }

  /**
   * Convert an instance of Articulo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

